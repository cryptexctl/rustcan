name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../../rustcan-${{ matrix.os }}-${{ matrix.arch }}.zip rustcan.exe
          else
            tar czf ../../../rustcan-${{ matrix.os }}-${{ matrix.arch }}.tar.gz rustcan
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rustcan-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            target/rustcan-${{ matrix.os }}-${{ matrix.arch }}.zip
            target/rustcan-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: rustcan-*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/rustcan-ubuntu-latest-x86_64.tar.gz
          asset_name: rustcan-linux-x86_64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/rustcan-ubuntu-latest-aarch64.tar.gz
          asset_name: rustcan-linux-aarch64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/rustcan-windows-latest-x86_64.zip
          asset_name: rustcan-windows-x86_64.zip
          asset_content_type: application/zip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/rustcan-macos-latest-x86_64.tar.gz
          asset_name: rustcan-macos-x86_64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/rustcan-macos-latest-aarch64.tar.gz
          asset_name: rustcan-macos-aarch64.tar.gz
          asset_content_type: application/gzip 
